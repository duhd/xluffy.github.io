<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on xluffy&#39;s page</title>
    <link>https://xluffy.github.io/categories/mysql/</link>
    <description>Recent content in Mysql on xluffy&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xluffy.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to resolve I/O issue on cloud</title>
      <link>https://xluffy.github.io/post/how-to-resolve-io-issue-on-cloud/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/how-to-resolve-io-issue-on-cloud/</guid>
      <description>Một trong các bài toán khiến mình khá đau đầu khi lên plan để chuyển một hệ thống từ physical server lên cloud đó là bài toán giới hạn I/O và chi phí cho database. Nó khiến mình mất khá nhiều thời gian và thắc mắc, bài này là bài lược dịch từ một bài blog của Percona, có nói chi tiết các cách giải quyết, các issues có thể gặp phải và cách giải quyết các issues đó.</description>
    </item>
    
    <item>
      <title>Delayed Replication in MySQL</title>
      <link>https://xluffy.github.io/post/delayed-replication-in-mysql/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/delayed-replication-in-mysql/</guid>
      <description>Trong bài Giới thiệu về MySQL Replication mình có giới thiệu một chức năng của hệ thống Replication đó là realtime backup. Nếu server master gặp sự cố như hư hỏng ổ cứng mà không thể phục hồi dữ liệu từ ổ cứng thì các bản backup offline định kì sẽ có độ trễ dữ liệu. Ví dụ nếu ta chỉ chạy offline backup dữ liệu 2 lần/ngày thì dữ liệu trong trường hợp xấu nhất sẽ bị mất trong vòng 12 tiếng.</description>
    </item>
    
    <item>
      <title>Change schema of huge table in MySQL</title>
      <link>https://xluffy.github.io/post/change-schema-of-huge-table-in-mysql/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/change-schema-of-huge-table-in-mysql/</guid>
      <description>1. Giới thiệu ALTER TABLE cho phép ta có thể thay đổi cấu trúc của một bảng đã tồn tại. Ví dụ ta có thể thêm/xóa cột, tạo hoặc xóa index trên bảng, thay đổi kiểu dữ liệu của một cột hoặc đổi tên cột/bảng/storage engine. Khi thay đổi cấu trúc của bảng, nếu có một connection khác sử dụng bảng đó, một metadata lock sẽ được bật lên và truy vấn SQL đó sẽ phải chờ cho tới khi lock được release.</description>
    </item>
    
    <item>
      <title>How to fix MySQL replication</title>
      <link>https://xluffy.github.io/post/how-to-fix-mysql-replication/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/how-to-fix-mysql-replication/</guid>
      <description>Khi vận hành một hệ thống MySQL replication, thì khi một server slave bị lỗi có nghĩa là dữ liệu giữa Slave và Master đã có sự sai lệch, và lúc đó Slave sẽ không còn tác dụng trong hệ thống nữa. Nhiệm vụ của người vận hành hệ thống là cần fix để đưa slave quay trở lại hoạt động bình thường.
Có nhiều cách để fix slave tùy vào từng trường hợp cụ thể, một trong những yêu cầu cần thiết để có thể giải quyết nhanh chóng khi hệ thống M-S bị lỗi đó là bạn phải hiểu dữ liệu của bạn, phải biết là table đó làm gì, dữ liệu lưu trong đó có tác dụng gì, phục vụ cho chức năng nào, yêu cầu độ chính xác của dữ liệu đó ra sao thì mới có hướng giải quyết cụ thể.</description>
    </item>
    
    <item>
      <title>Intro MySQL replication</title>
      <link>https://xluffy.github.io/post/intro-mysql-replication/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/intro-mysql-replication/</guid>
      <description>1. Giới thiệu Right tool for right job. Trước tiên phải hiểu là MySQL Replication không phải là giải pháp giải quyết mọi bài toán về quá tải hệ thống cơ sở dữ liệu. Để mở rộng một hệ thống ta có hai phương pháp mở rộng là scale up và scale out. Bắt đầu với 1 máy chủ thì hai phương pháp trên được diễn giải như sau:</description>
    </item>
    
  </channel>
</rss>