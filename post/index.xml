<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xluffy&#39;s page</title>
    <link>https://xluffy.github.io/post/</link>
    <description>Recent content in Posts on xluffy&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xluffy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to resolve I/O issue on cloud</title>
      <link>https://xluffy.github.io/post/how-to-resolve-io-issue-on-cloud/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/how-to-resolve-io-issue-on-cloud/</guid>
      <description>Một trong các bài toán khiến mình khá đau đầu khi lên plan để chuyển một hệ thống từ physical server lên cloud đó là bài toán giới hạn I/O và chi phí cho database. Nó khiến mình mất khá nhiều thời gian và thắc mắc, bài này là bài lược dịch từ một bài blog của Percona, có nói chi tiết các cách giải quyết, các issues có thể gặp phải và cách giải quyết các issues đó.</description>
    </item>
    
    <item>
      <title>ALB vs nginx</title>
      <link>https://xluffy.github.io/post/alb-vs-nginx/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/alb-vs-nginx/</guid>
      <description>Nhân một người bạn hỏi về vấn đề này, mình take note lại vì đã được hỏi 2 lần :sosad:
 ALB: là dịch vụ Application Load Balancer của AWS, một dịch vụ về cân bằng tải của AWS hoạt động ở layer 7 support giao thức HTTP/HTTPs, Websocket, HTTP2.
nginx: là một webserver opensource, support cả chức năng cân bằng tải ở layer 7 (có support ở layer 4 nhưng khá cơ bản).</description>
    </item>
    
    <item>
      <title>Build simple backgroud job with RabbitMQ</title>
      <link>https://xluffy.github.io/post/build-simple-bg-job-with-rabbitmq/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/build-simple-bg-job-with-rabbitmq/</guid>
      <description>Ở trong một bài viết trước mình đã có tìm hiểu về Sidekiq - backgroud job, hiểu cách implement để đảm bảo tính tin cậy. Hôm nay nhân một người bạn có hỏi về một framework khác sử dụng RabbitMQ để làm queue, thấy khá thú vị nên dành chút thời gian đọc quá.
Ý tưởng là sẽ viết một sender.rb để đóng gói các task thành dạng message và gửi vào queue.</description>
    </item>
    
    <item>
      <title>Sidekiq, how to reliability?</title>
      <link>https://xluffy.github.io/post/sidekiq-how-to-reliability/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/sidekiq-how-to-reliability/</guid>
      <description>Thông thường, khi xây dựng một ứng dụng web, quy trình đơn giản sẽ như sau:
 Người dùng gửi yêu cầu, request tới web application. Web application nhận request, xử lý (hoặc intergration với service khác như database để xử lý). Cuối cùng trả về kết quả cho user.  Ví dụ trong thực tế, bạn đăng ký user ở một website nào đó, sau khi nhập đầy đủ thông tin, submit -&amp;gt; request sẽ được gửi lên server và người dùng sẽ chờ cho tới khi server xử lý xong và trả về kết quả (thành công hoặc thất bại).</description>
    </item>
    
    <item>
      <title>Rails for DevOps engineer</title>
      <link>https://xluffy.github.io/post/rails-for-devops-engineer/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/rails-for-devops-engineer/</guid>
      <description>Một số cú pháp, best practice khi sử dụng Active Record cơ bản cho mấy bạn dép-ộp engineer.
1. Basic Active Record 1.1 find Tham số truyền vào của find là primary-key, ví dụ User.find(1) tương đương với SELECT * FROM users WHERE id = 1 LIMIT 1
Cũng có thể nhận nhiều giá trị kiểu User.find(1, 10) hoặc User.find([1, 10]) sẽ tương đương với SELECT * FROM users WHERE id IN (1, 10)</description>
    </item>
    
    <item>
      <title>Setup hệ thống mạng cho cty vừa và nhỏ</title>
      <link>https://xluffy.github.io/post/how-to-setup-our-networking/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/how-to-setup-our-networking/</guid>
      <description>Là một công ty công nghệ, làm về dịch vụ internet, nhu cầu về mạng là một nhu cầu cơ bản và bắt buộc. Nếu không có internet thì chỉ có nước cả công ty cùng nghỉ đi chơi. Vì vậy setup một hệ thống mạng sao cho vừa đạt nhu cầu, chi phí rẻ là một việc không dễ dàng, nhất là khi các giải pháp luôn được quảng cáo vượt quá hiệu năng thực sự.</description>
    </item>
    
    <item>
      <title>Tham chiếu và con trỏ trong C&#43;&#43;</title>
      <link>https://xluffy.github.io/post/noted-c&#43;&#43;/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/noted-c&#43;&#43;/</guid>
      <description>Tại sao hôm nay có bài này?
Mình chẳng bao giờ code C, C++ nên chẳng bao giờ nhớ được các khái niệm về con trỏ. Nên mình không thích con trỏ tí nào cả. Nhưng khổ cái này trong một số trường hợp mình lại vẫn muốn hiểu nó, mà do không làm việc với C, C++ (và sau này có Golang) nên mình lại rất hay &amp;ldquo;quên&amp;rdquo;. Nên tổng hợp lại để khi nào quên thì vô đọc lại.</description>
    </item>
    
    <item>
      <title>Băm và lưu password đúng cách</title>
      <link>https://xluffy.github.io/post/how-to-hash-store-password/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/how-to-hash-store-password/</guid>
      <description>Sau khi đọc bài viết băm mật khẩu đúng cách của anh thaidn, mình nhớ lại lúc mình mới ra trường, cũng đã từng nghĩ về vấn đề này (lúc đó mình khá thích môn Bảo Mật Thông Tin ở trường) nhưng chưa bao giờ hiểu tường tận. Chỉ biết là không nên:
 Lưu password ở dạng plain-text. Hash với một thuật toán hash mạnh, không nên xài MD5, SHA-1 &amp;hellip; Hash với salt.</description>
    </item>
    
    <item>
      <title>What is difference between SSL, TLS, and HTTPs?</title>
      <link>https://xluffy.github.io/post/what-is-difference-between-ssl-tls-https/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/what-is-difference-between-ssl-tls-https/</guid>
      <description>Chắc ai cũng đã nghe qua về HTTPs (HTTP secure), SSL và TLS, nhưng có bao giờ bạn thắc mắc tụi này khác nhau như thế nào chưa? Và liệu có phải 3 thuật ngữ đó đều chỉ một thứ hay không?
SSL (Secure Sockets Layer), đây là tên được đặt bởi những người phát minh ra giao thức này phiên bản đầu tiên, công ty Netspace (công ty này sau đó đã được AOL mua lại).</description>
    </item>
    
    <item>
      <title>Speeding up backup/restore in PostgreSQL</title>
      <link>https://xluffy.github.io/post/speeding-up-backup-and-restore-in-postgresql/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/speeding-up-backup-and-restore-in-postgresql/</guid>
      <description>Tương tự như MySQL, bạn có thể dùng replication để backup. Nhưng cuộc đời lúc nào cũng có những nhu cầu ngoại lệ, thường thấy nhất là data cho môi trường staging hoặc development hoặc đơn giản chỉ là chép một bảng từ chỗ này qua chỗ kia để test cái này cái kia. Cách đơn giản, dễ xài, có thể lấy một phần dữ liệu đó là pg_dump, ta có thể dump một table, dump schema &amp;hellip; dễ dàng với dữ liệu nhỏ.</description>
    </item>
    
    <item>
      <title>Improving MongoDB performance by managing indexes</title>
      <link>https://xluffy.github.io/post/improving-mongodb-perf-by-managing-indexes/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/improving-mongodb-perf-by-managing-indexes/</guid>
      <description>Ai cũng biết đánh index giúp tăng tốc các truy vấn tìm kiếm, tìm kiếm trong cây index (B-Tree) sẽ nhanh hơn scan trong toàn bộ bảng. Ai cũng biết nên không nói nhiều về index là gì nữa vậy nhé.
Đây là MongoDB users dataset bạn có thể tải về chơi thử.
1. Sơ sơ về index Index trong Mongo cũng tương tự các cơ sở dữ liệu quan hệ, ví dụ ta có một index được định nghĩa như sau:</description>
    </item>
    
    <item>
      <title>Delayed Replication in MySQL</title>
      <link>https://xluffy.github.io/post/delayed-replication-in-mysql/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/delayed-replication-in-mysql/</guid>
      <description>Trong bài Giới thiệu về MySQL Replication mình có giới thiệu một chức năng của hệ thống Replication đó là realtime backup. Nếu server master gặp sự cố như hư hỏng ổ cứng mà không thể phục hồi dữ liệu từ ổ cứng thì các bản backup offline định kì sẽ có độ trễ dữ liệu. Ví dụ nếu ta chỉ chạy offline backup dữ liệu 2 lần/ngày thì dữ liệu trong trường hợp xấu nhất sẽ bị mất trong vòng 12 tiếng.</description>
    </item>
    
    <item>
      <title>Change schema of huge table in MySQL</title>
      <link>https://xluffy.github.io/post/change-schema-of-huge-table-in-mysql/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/change-schema-of-huge-table-in-mysql/</guid>
      <description>1. Giới thiệu ALTER TABLE cho phép ta có thể thay đổi cấu trúc của một bảng đã tồn tại. Ví dụ ta có thể thêm/xóa cột, tạo hoặc xóa index trên bảng, thay đổi kiểu dữ liệu của một cột hoặc đổi tên cột/bảng/storage engine. Khi thay đổi cấu trúc của bảng, nếu có một connection khác sử dụng bảng đó, một metadata lock sẽ được bật lên và truy vấn SQL đó sẽ phải chờ cho tới khi lock được release.</description>
    </item>
    
    <item>
      <title>How to fix MySQL replication</title>
      <link>https://xluffy.github.io/post/how-to-fix-mysql-replication/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/how-to-fix-mysql-replication/</guid>
      <description>Khi vận hành một hệ thống MySQL replication, thì khi một server slave bị lỗi có nghĩa là dữ liệu giữa Slave và Master đã có sự sai lệch, và lúc đó Slave sẽ không còn tác dụng trong hệ thống nữa. Nhiệm vụ của người vận hành hệ thống là cần fix để đưa slave quay trở lại hoạt động bình thường.
Có nhiều cách để fix slave tùy vào từng trường hợp cụ thể, một trong những yêu cầu cần thiết để có thể giải quyết nhanh chóng khi hệ thống M-S bị lỗi đó là bạn phải hiểu dữ liệu của bạn, phải biết là table đó làm gì, dữ liệu lưu trong đó có tác dụng gì, phục vụ cho chức năng nào, yêu cầu độ chính xác của dữ liệu đó ra sao thì mới có hướng giải quyết cụ thể.</description>
    </item>
    
    <item>
      <title>Docker Ecosystem</title>
      <link>https://xluffy.github.io/post/docker-eco-system/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/docker-eco-system/</guid>
      <description>Hôm nay mình đọc được một bài khá là hay của tác giả @lherrera trên medium, nó giải thích khá nhiều các thông tin cho các bạn mới bắt đầu với Docker. Mình xin phép lược dịch (có bỏ một số phần cho đơn giản và dễ hiểu cũng như thêm một số phần khác để giải thích kỹ hơn)
Khi mới bắt đầu với Docker bạn có thể bị nhầm lẫn giữa một rừng các công cụ với tên kiểu Docker-something.</description>
    </item>
    
    <item>
      <title>Intro MySQL replication</title>
      <link>https://xluffy.github.io/post/intro-mysql-replication/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://xluffy.github.io/post/intro-mysql-replication/</guid>
      <description>1. Giới thiệu Right tool for right job. Trước tiên phải hiểu là MySQL Replication không phải là giải pháp giải quyết mọi bài toán về quá tải hệ thống cơ sở dữ liệu. Để mở rộng một hệ thống ta có hai phương pháp mở rộng là scale up và scale out. Bắt đầu với 1 máy chủ thì hai phương pháp trên được diễn giải như sau:</description>
    </item>
    
  </channel>
</rss>